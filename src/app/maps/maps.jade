.container

  div
    acme-navbar (creationDate="main.creationDate")
  .row
    .col-md-12
      h2 1. Install with bower
        pre bower install cartodb.js

        h3 Add cartodb.js and css to your site:
        pre
            &lt;link rel="stylesheet" href="http://libs.cartocdn.com/cartodb.js/v3/3.15/themes/css/cartodb.css" /&gt;
            &lt;script src="http://libs.cartocdn.com/cartodb.js/v3/3.15/cartodb.js"&gt;&lt;/script&gt;

            &lt;!-- use these cartodb.css links if you are using https --&gt;
            &lt;!--link rel="stylesheet" href="https://cartodb-libs.global.ssl.fastly.net/cartodb.js/v3/3.15/themes/css/cartodb.css" /--&gt;

            &lt;!-- use this cartodb.js link if you are using https --&gt;
            &lt;!-- script src="https://cartodb-libs.global.ssl.fastly.net/cartodb.js/v3/3.15/cartodb.js"&gt;&lt;/script --&gt;

      br
      h2 2. Create the vis
        pre cartodb.createVis('map', 'http://documentation.cartodb.com/api/v2/viz/2b13c956-e7c1-11e2-806b-5404a6a683d5/viz.json');


      h2 Full Example

      pre
        code.
          &lt;html&gt;
            &lt;head&gt;
              &lt;link rel="stylesheet" href="http://libs.cartocdn.com/cartodb.js/v3/3.15/themes/css/cartodb.css" /&gt;
              &lt;script src="http://libs.cartocdn.com/cartodb.js/v3/3.15/cartodb.js"&gt;&lt;/script&gt;
              &lt;!-- use these cartodb.css links if you are using https --&gt;
              &lt;!--link rel="stylesheet" href="https://cartodb-libs.global.ssl.fastly.net/cartodb.js/v3/3.15/themes/css/cartodb.css" /--&gt;
              &lt;!-- use this cartodb.js link if you are using https --&gt;
              &lt;!-- script src="https://cartodb-libs.global.ssl.fastly.net/cartodb.js/v3/3.15/cartodb.js"&gt;&lt;/script --&gt;
            &lt;/head&gt;
            &lt;body&gt;
              &lt;div id="map"&gt;&lt;/div&gt;

              &lt;script&gt;
              // get the viz.json url from the CartoDB Editor
              // - click on visualize
              // - create new visualization
              // - make visualization public
              // - click on publish
              // - go to API tab

              window.onload = function() {
                cartodb.createVis('map', 'http://documentation.cartodb.com/api/v2/viz/2b13c956-e7c1-11e2-806b-5404a6a683d5/viz.json');
              }
              &lt;/script&gt;
            &lt;/body&gt;
          &lt;/html&gt;

      br
      h2 3. Manipulate the vis
        pre.
          cartodb.createVis('map', 'http://documentation.cartodb.com/api/v2/viz/2b13c956-e7c1-11e2-806b-5404a6a683d5/viz.json')
          .done(function(vis, layers) {
            // layer 0 is the base layer, layer 1 is cartodb layer
            // when setInteraction is disabled featureOver is triggered
            layers[1].setInteraction(true);
            layers[1].on('featureOver', function(e, latlng, pos, data, layerNumber) {
              console.log(e, latlng, pos, data, layerNumber);
            });

            // you can get the native map to work with it
            var map = vis.getNativeMap();

            // now, perform any operations you need, e.g. assuming map is a L.Map object:
            // map.setZoom(3);
            // map.panTo([50.5, 30.5]);
          });

  .row
    .col-md-12
      #map

  .row
    .col-md-12
      br
      h2 Using an existing map like Leaflet
        br
        pre.
          var map = new L.Map('map_canvas', {
            center: [0,0],
            zoom: 2
          });

          cartodb.createLayer(map, 'http://documentation.cartodb.com/api/v2/viz/2b13c956-e7c1-11e2-806b-5404a6a683d5/viz.json')
            .addTo(map)
            .on('done', function(layer) {
              //do stuff
            })
            .on('error', function(err) {
              alert("some error occurred: " + err);
            });
  br
  .row
    .col-md-12
      #map_canvas


  .row
    .col-md-12
      br
      h2 Creating the Vis on runtime
        br
        pre.
          cartodb.createLayer(map, {
            user_name: 'mycartodbuser',
            type: 'cartodb',
            sublayers: [{
              sql: "SELECT * FROM table_name",
              cartocss: '#table_name {marker-fill: #F0F0F0;}'
            }]
          })
          .addTo(map) // add the layer to our map which already contains 1 sublayer
          .done(function(layer) {

            // create and add a new sublayer
            layer.createSubLayer({
              sql: "SELECT * FROM table_name limit 200",
              cartocss: '#table_name {marker-fill: #F0F0F0;}'
            });

            // change the query for the first layer
            layer.getSubLayer(0).setSQL("SELECT * FROM table_name limit 10");
          });
  br
  .row
    .col-md-12
      #layer_selector.cartodb-infobox
        ul
          li(data="all" class="selected") Escuelas
          li(data="1798074") Less than or equal 1798074
          li(data="45164") Less than or equal 45164
          li(data="19932") Less than or equal  19932
          li(data="9596") Less than or equal 9596
    .col-md-12
      #map_canvas_runtime


  .row
    .col-md-12
      br
      h2 Manipulating the Map
        br
        pre.
          function createSelector(layer) {

            var sql = new cartodb.SQL({ user: 'edufierro' });
            var $options = $('#layer_selector li');

            $options.click(function(e) {
              // get the area of the selected layer
              var $li = $(e.target);
              var area = $li.attr('data');
              // deselect all and select the clicked one
              $options.removeClass('selected');
              $li.addClass('selected');
              // create query based on data from the layer
              var query = "select * from municspob";
              if(area !== 'all') {
                query = "select * from municspob where  pobtot <= " + area;
              }

              // change the query in the layer to update the map
              layer.getSubLayer(0).setSQL(query);
              console.log('new layer', query , area)
            });
          }
